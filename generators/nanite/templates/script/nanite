#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'erb'
require 'yaml'
require 'socket'

APP_ROOT = File.expand_path(File.dirname(__FILE__)+"/../")

options = {
  :piddir => File.join(APP_ROOT, "tmp", "pids"),
  :nanitedir => APP_ROOT + "/nanite",
  :agent => "worker",
  :tags => []
}

optparser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} <start|stop|restart> [options]"

  opts.on("-a", "--agent=AGENT", "Agent name (default=worker)") do |o|
    options[:agent] = o
  end

  opts.on("-P", "--piddir=PATH", "PID dir to use (if daemonized)", "Default: #{options[:piddir]}") do |o|
    options[:piddir] = o
  end

  opts.on("-d", "--daemonize", "Run agent as a daemon") do |o|
    options[:daemonize] = true
  end

  opts.on("-c", "--cluster=NUM_NODES", Integer, "Number of daemons to run.") do |o|
    options[:cluster] = o.to_i
    options[:daemonize] = true
  end

  opts.on("-e", "--environment=RAILS_ENV", "Rails environment to run in") do |e|
    ENV['RAILS_ENV'] = e
  end

  opts.on("-t", "--tag TAG", "Add a custom tag to agents. Can specify multiple times, or specified",
                             "in the config file as a YAML array named tags") do |tag|
    options[:tags] << tag
  end

  opts.on_tail("-h", "--help", "Show this help message.") do
    puts opts
    exit
  end
end

args = []
begin
  args = optparser.parse!
rescue => e
  $stderr.puts e
  $stderr.puts optparser
  exit 0
end

if args.empty?
  $stdout.puts optparser
  exit 1
end

class NaniteCtl
  def initialize(options)
    @options = options
    @identifier = options[:agent] || "worker"

    cmds = Dir.glob(APP_ROOT + "/vendor/gems/nanite*/bin/nanite-agent")
    @cmd = cmds.find {|e| File.exist?(e) }
    if @cmd.nil?
      @cmd = "nanite-agent"
    end

    config_file = APP_ROOT+"/config/nanite/#{@identifier}.yml"
    @nanite_opts = YAML::load(ERB.new(IO.read(config_file)).result)[ENV["RAILS_ENV"] || "development"]
  end    

  def start
    FileUtils.mkpath(@options[:piddir])
    nanite_root = File.join(@options[:nanitedir], @identifier)
    nanite_opts = " -n '#{nanite_root}' --pid-dir '#{@options[:piddir]}' "
    nanite_opts << " --log-dir #{APP_ROOT}/log "

    tags = [@options.delete(:tags), @nanite_opts.delete(:tags)].flatten
    nanite_opts << tags.map {|t| "--tag #{t} "}.join

    nanite_opts << @nanite_opts.map {|k,v| "--#{k.to_s.gsub("_", "-")} '#{v}'" }.join(" ")
    if @options[:daemonize]
      nanite_opts << " -d"
    end

    (@options[:cluster] || 1).times do |i|
      system("#{@cmd} #{nanite_opts} -t #{@identifier}-#{Socket.gethostname.split('.')[0]}-#{i}")
    end
  end

  def stop
    Dir.glob(@options[:piddir]+"/nanite.nanite-#{@identifier}*.pid") do |pidfile|
      begin
        pid = File.read(pidfile).to_i
        Process.kill("TERM", pid)
        Process.kill(0, pid)
        Process.wait
      rescue Errno::ECHILD, Errno::ESRCH => e
        $stdout.puts "Process #{pid} has stopped"
      ensure
        File.unlink(pidfile) if File.exist?(pidfile)
      end
    end
  end

  def restart
    begin
      stop
    rescue => e
      $stderr.puts "Warning: #{e}"
    end
    start
  end
end

ctl = NaniteCtl.new(options)
ctl.send(args.shift)
